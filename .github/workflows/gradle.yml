name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    
permissions:
      contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    # 1. Java 21 설정
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    # 2. Gradle 패키지 캐싱
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    # 3. Spring Boot 애플리케이션 빌드
    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: clean bootJar

    # 4. Docker 이미지 빌드
    - name: Docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/cheek .

    # 5. DockerHub 로그인
    - name: Docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PW }}

    # 6. Docker 이미지 푸시
    - name: Docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/cheek

    # 7. EC2에 원격 접속 후 배포
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_INSTANCE_HOST }}
        port: ${{ secrets.EC2_INSTANCE_PORT }}
        username: ${{ secrets.EC2_INSTANCE_USERNAME }}
        key: ${{ secrets.EC2_INSTANCE_PRIVATE_KEY }}
        script: |
          # 최신 이미지 가져오기
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}
          
          # 기존 컨테이너 중지 및 삭제 (실패해도 계속 진행)
          docker stop ${{ secrets.DOCKERHUB_NAME }} || true
          docker rm ${{ secrets.DOCKERHUB_NAME }} || true
          
          # 새로운 컨테이너 실행 (환경 변수 설정 포함)
          docker run --name ${{ secrets.DOCKERHUB_NAME }} -e JASYPT_PASSWORD=${{ secrets.JASYPT_PASSWORD }} -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}
          
          # 사용하지 않는 Docker 이미지 정리
          docker image prune -f
