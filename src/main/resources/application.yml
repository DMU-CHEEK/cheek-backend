spring:
  application:
    name: cheek

  datasource:
    url: ENC(NX9UCq/QaoOc6bGhK6HNiCvoBZX5AUGVry89P8KqmFJ7b+jwSEQaf6FgkyVu8ZJEAr99GCLo2UcrdXnkZV7YRdh264HqikwfFhOiGnqbnuLGQT06HKECSw==)
    username: ENC(4SVZt54EqpZprLj1Ah0P4A==)
    password: ENC(ztIJQ7tdmQvEvUOX0u65zhgxIbr6rc/N)
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
    opn-in-view: false
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        show_sql: true
        format_sql: true

  security:
    oauth2:
      client:
        provider:
          kakao:
            authorization-uri: https://hauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
        registration:
          kakao:
            client-id: ENC(ANR+g2pVhsxkaB17EC6P9ti8yiCmgFSxzCrE8p541uIZogoyYRR6TBQjh/r0HyuF)
            client-authentication-method: client_secret_post
            redirect-uri: http://localhost:8080/auth/kakao/callback
            authorization-grant-type: authorization_code
            client-name: kakao
            scope: account_email

  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 50MB

  mail:
    protocol: smtp
    host: smtp.gmail.com
    port: 587
    username: ENC(UIDfs23ER50YXKFPH6LlAGwaazY73y8uvZPnYA5Z0eA=)
    password: ENC(DNMjb0tPz1ercoPfeN0J3ju5voX2tMFcJ/KLtUicEEQ=)
    default-encoding: utf-8
    properties:
      mail:
        smtp:
          starttls:
            enable: true
          auth: true
    auth-code-expiration-millis: 180000

logging:
  level:
    org.hibernate.orm.jdbc.bind: trace

jasypt:
  password: ${PASSWORD}

cloud:
  aws:
    stack:
      auto: false
    region:
      static: us-east-1
    s3:
      bucket-name: dmu.cheek.2024
    credentials:
      access-key: ENC(PgCmDbWnqTNkXUhib6ZoV7IOScmSF+6ImwxuO9/DgO8=)
      secret-key: ENC(Hm/Loje66iPAf0X54EXsYW3tuD3w+34dE1ncQxI9G5A3H2EYIlwQaBNKhSZjOpaE0pc7kdVzTw0=)

springdoc:
  swagger-ui:
    path: /api-test  # swagger-ui 접근 경로에 대한 별칭
    groups-order: DESC # path, query, body, response 순으로 출력
    tags-sorter: alpha # 태그를 알파벳 순으로 정렬
    operations-sorter: method  # delete - get - patch - post - put 순으로 정렬, alpha를 사용하면 알파벳 순으로 정렬 가능
  paths-to-match:
    - /** # swagger-ui에 표시할 api의 엔드포인트 패턴
