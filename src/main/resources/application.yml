spring:
  application:
    name: cheek

  datasource:
    url: ENC(n56+9rtLrf+B12JU3ffKsWxOl+RFcVtv+b4YlJ67avltXIabj9hkeD/Ys0RY8jC7SJ134uA+ewWRWvwgDvlkcZ/9k3oiKj5T1qgwbZJGr5z7+Bgji6NCukJXsYKCE1glhi8napBYZOY4rWhZMl+RPG7Ne24fwO6tlmp+Wix0fLY=)
    username: ENC(1dFjvNmu/z/590fDpymXag==)
    password: ENC(L4rr2E2gmUkojuKvGytcGdltwh3Ojo1S)
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
    opn-in-view: false
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        show_sql: true
        format_sql: true

  security:
    oauth2:
      client:
        provider:
          kakao:
            authorization-uri: https://hauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
        registration:
          kakao:
            client-id: ENC(ANR+g2pVhsxkaB17EC6P9ti8yiCmgFSxzCrE8p541uIZogoyYRR6TBQjh/r0HyuF)
            client-authentication-method: client_secret_post
            redirect-uri: http://localhost:8080/auth/kakao/callback
            authorization-grant-type: authorization_code
            client-name: kakao
            scope: account_email

  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 50MB

logging:
  level:
    org.hibernate.orm.jdbc.bind: trace

jasypt:
  password: ${PASSWORD}

jwt:
  header: Authorization
  secret: ENC(zkmSjc5Nt3TYzkJpos6m9Q==)
#  secret: QhEh123
  access-token-validity-in-seconds: 6000000 #100 min
  refresh-token-validity-in-seconds: 1209600000 #15 days
  token:
    prefix: Bearer

file:
#  dir: /Users/sejeong/IdeaProjects/cheek/src/main/resources
  dir: /home/ubuntu/img

cloud:
  aws:
    stack:
      auto: false
    region:
      static: us-east-1
    s3:
      bucket-name: dmu.cheek.2024
    credentials:
      access-key: ENC(PgCmDbWnqTNkXUhib6ZoV7IOScmSF+6ImwxuO9/DgO8=)
      secret-key: ENC(Hm/Loje66iPAf0X54EXsYW3tuD3w+34dE1ncQxI9G5A3H2EYIlwQaBNKhSZjOpaE0pc7kdVzTw0=)

springdoc:
  swagger-ui:
    path: /api-test  # swagger-ui 접근 경로에 대한 별칭

    groups-order: DESC # path, query, body, response 순으로 출력

    tags-sorter: alpha # 태그를 알파벳 순으로 정렬

    operations-sorter: method  # delete - get - patch - post - put 순으로 정렬, alpha를 사용하면 알파벳 순으로 정렬 가능

  paths-to-match:
    - /api/** # swagger-ui에 표시할 api의 엔드포인트 패턴